# Schedule definitions for thorn HydroToyGPU

STORAGE: conserved
STORAGE: primitive
STORAGE: flux_x flux_y flux_z
STORAGE: rhs



# Initial conditions

SCHEDULE HydroToyGPU_Initialize AT initial
{
  LANG: C
  WRITES: conserved(interior)
} "Set up hydro initial conditions"

SCHEDULE HydroToyGPU_Sync AT initial AFTER HydroToyGPU_Initialize
{
  LANG: C
  OPTIONS: global
  SYNC: conserved
} "Synchronize"

SCHEDULE HydroToyGPU_Boundaries AT initial AFTER HydroToyGPU_Sync
{
  LANG: C
  WRITES: conserved(boundary)
} "Apply boundary conditions"

SCHEDULE HydroToyGPU_EstimateError AT postinitial
{
  LANG: C
  READS: conserved(everywhere)
  WRITES: CarpetX::regrid_error(interior)
} "Estimate local error for regridding initial conditions"



# Regridding

SCHEDULE HydroToyGPU_Sync AT postregrid
{
  LANG: C
  OPTIONS: global
  SYNC: conserved
} "Synchronize"

SCHEDULE HydroToyGPU_Boundaries AT postregrid AFTER HydroToyGPU_Sync
{
  LANG: C
  WRITES: conserved(boundary)
} "Apply boundary conditions"

SCHEDULE HydroToyGPU_EstimateError AT poststep
{
  LANG: C
  READS: conserved(everywhere)
  WRITES: CarpetX::regrid_error(interior)
} "Estimate local error for regridding during evolution"



# Time stepping

SCHEDULE HydroToyGPU_Pressure IN ODESolvers_RHS
{
  LANG: C
  READS: conserved(everywhere)
  WRITES: primitive(everywhere)
} "Calculate pressure"

SCHEDULE HydroToyGPU_Fluxes IN ODESolvers_RHS AFTER HydroToyGPU_Pressure
{
  LANG: C
  READS: conserved(everywhere)
  READS: primitive(everywhere)
  WRITES: flux_x(interior) flux_y(interior) flux_z(interior)
  SYNC: flux_x flux_y flux_z
} "Calculate the hydro fluxes"

SCHEDULE HydroToyGPU_FluxBoundaries IN ODESolvers_RHS AFTER HydroToyGPU_Fluxes
{
  LANG: C
  WRITES: flux_x(boundary) flux_y(boundary) flux_z(boundary)
} "Apply boundary conditions to hydro fluxes"

SCHEDULE HydroToyGPU_RHS IN ODESolvers_RHS AFTER HydroToyGPU_FluxBoundaries
{
  LANG: C
  READS: flux_x(everywhere) flux_y(everywhere) flux_z(everywhere)
  WRITES: rhs(everywhere)
} "Calculate the RHS of the hydro equations"

SCHEDULE HydroToyGPU_Sync IN ODESolvers_PostStep
{
  LANG: C
  OPTIONS: global
  SYNC: conserved
} "Synchronize"

SCHEDULE HydroToyGPU_Boundaries IN ODESolvers_PostStep AFTER HydroToyGPU_Sync
{
  LANG: C
  WRITES: conserved(boundary)
} "Apply boundary conditions"



# Restriction

SCHEDULE HydroToyGPU_Sync AT postrestrict
{
  LANG: C
  OPTIONS: global
  SYNC: conserved
} "Synchronize"

SCHEDULE HydroToyGPU_Boundaries AT postrestrict AFTER HydroToyGPU_Sync
{
  LANG: C
  WRITES: conserved(boundary)
} "Apply boundary conditions"
