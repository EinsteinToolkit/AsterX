/* Declaration of variables and function prototypes for thorn RIT_EOS

   N.B.: prototypes for scheduled functions and functions provided or used by
         this thorn are automatically generated by Cactus and MUST NOT be placed
         here in order to avoid conflicts.                                      */

#ifndef RIT_EOS_HH
#define RIT_EOS_HH

#include <vector>
#include <H5Cpp.h>
#include <cctk.h>
#include <cctk_Parameters.h>

using std::vector;
using H5::H5File;



/* Conversion factors from EOS table units to geometrized ("Cactus") units. The
   table units are mostly CGS, with a few exceptions (e.g., temperature is in
   MeV). Please refer to the documentation
   (https://bitbucket.org/andschn/sroeos/src/master/User_Guide/User_Guide.pdf)
   for further details.

   N.B.: you have to ***MULTIPLY*** the quantities read from the EOS table by
         the following conversion factors in order to convert those quantities
         into geometrized ("Cactus") units.                                     */
namespace RIT_EOS_helpers {
    DECLARE_CCTK_PARAMETERS;

    // Helper values
    const CCTK_REAL ln10                                = log(10.);
    const CCTK_REAL poly_Gamma_minus_1                  = poly_Gamma - 1.;
    const CCTK_REAL poly_Gamma_times_poly_Gamma_minus_1 = poly_Gamma*poly_Gamma_minus_1;
    const CCTK_REAL poly_K_poly_Gamma                   = poly_K*poly_Gamma;

    // Basic quantities in SI units
    const CCTK_REAL G    = 6.67408e-11;     // m^3/(kgÂ·s^2)
    const CCTK_REAL c    = 2.99792458e+08;  // m/s
    const CCTK_REAL MSun = 1.98847e+30;     // kg

    // Helper quantities
    const CCTK_REAL c2       = c*c;
    const CCTK_REAL c6       = c2*c2*c2;
    const CCTK_REAL c8       = c2*c6;
    const CCTK_REAL MSun2    = MSun*MSun;
    const CCTK_REAL MSun_c2  = MSun*c2;
    const CCTK_REAL G3_MSun2 = G*G*G*MSun2;

    /* Conversion factors and their logarithms. The leftmost hard-coded
       numerical factors in the logarithmic ones are needed for the intermediate
       conversion from CGS to SI, while the rightmost ones are needed in order
       to take the logarithm of something of order ~1, which is more precise
       than taking the logarithm of a very small number.                        */
    const CCTK_REAL eps_CGStoGeom = 1.e-07/MSun_c2;    // ~= 5.60e-55

    const CCTK_REAL log_rho_CGStoGeom   = log(1.e+03*G3_MSun2*1.e+18/c6) - 18.*ln10;  // ~= log(1.62e-18)
    const CCTK_REAL log_press_CGStoGeom = log(1.e-01*G3_MSun2*1.e+39/c8) - 39.*ln10;  // ~= log(1.80e-39)
    const CCTK_REAL log_eps_CGStoGeom   = log(1.e-07*1.e+55/MSun_c2)     - 55.*ln10;  // ~= log(5.60e-55)

    const CCTK_REAL press_over_rho_CGStoGeom = 1.e-04/c2;
    const CCTK_REAL press_over_eps_CGStoGeom = 1.e+06*G3_MSun2*MSun2/c6;
}



/* Function pointers used to select the correct routines to get thermodynamic
   quantities based on the value of the parameter 'EOS_type'. This is done in
   order to avoid passing those routines an 'EOS key'; this avoids if/switch
   statements at each call to those routines (i.e., at every point in the grid
   at every timestep).
   *** Namespace defined in SelectEOStype.cc                                    */
    // TODO: extend the list of routines
namespace RIT_EOS_function_callers {
    extern void (*press_eps_from_rho_temp_ye_caller)(
        const CCTK_REAL &,
        const CCTK_REAL &,
        const CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &);

    extern void (*press_temp_from_rho_ye_eps_caller)(
        const CCTK_REAL &,
        const CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &);

    extern void (*dpdrhoe_temp_from_rho_ye_eps_caller)(
        const CCTK_REAL &, 
        const CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &);

    extern void (*dpderho_temp_from_rho_ye_eps_caller)(
        const CCTK_REAL &, 
        const CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &);

    extern void (*dpdrhoe_dpderho_temp_from_rho_ye_eps_caller)(
        const CCTK_REAL &, 
        const CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &,
              CCTK_REAL &);
}



// Variables used to read and interpolate the table, allocated by ReadEOStable()
namespace RIT_EOS_tablevars {
    extern CCTK_INT  nrho,    ntemp,    nye;
    extern CCTK_INT  nrho_m1, ntemp_m1, nye_m1;
    extern CCTK_REAL energy_shift;
    extern CCTK_REAL *restrict logrho,   *restrict logtemp, *restrict ye;
    extern CCTK_REAL *restrict logpress, *restrict logenergy;
    extern CCTK_REAL *restrict dpdrhoe,  *restrict dpderho;
}



/* Keys used to select 3D variables to interpolate, allocated in
   Interpolators.cc                                                             */
namespace RIT_EOS_keys {
    // Generic key-type
    struct key {
        CCTK_REAL *restrict var3D;
        bool       do_exp_log;
        bool       do_energy_shift;
    };
    
    extern key press_key, eps_key, dpdrhoe_key, dpderho_key;
}

using namespace RIT_EOS_keys;





// ######################### FUNCTION PROTOTYPES ###############################

// Routines to get interpolation bounds. Defined in GetBounds.cc .
void GetBounds_var1D(
    const CCTK_REAL                 &x,
          CCTK_REAL *const restrict &var1D,
    const CCTK_INT                  &n,
          CCTK_INT                  &ilow,
          CCTK_INT                  &iup);

void GetBounds_var3D_logrho_ye_tabulated(
    const CCTK_REAL                 &x,
          CCTK_REAL *const restrict &var3D,
    const CCTK_INT                  &i,
    const CCTK_INT                  &k,
          CCTK_INT                  &jlow,
          CCTK_INT                  &jup);



// Routines to interpolate the EOS table. Defined in Interpolators.cc .
void vars3D_from_logrho_logtemp_ye(
    const CCTK_REAL   &xlogrho,
    const CCTK_REAL   &xlogtemp,
    const CCTK_REAL   &xye,
    const vector<key> &which_vars3D,
          CCTK_REAL  *restrict out_vars3D);

CCTK_REAL logtemp_from_logrho_ye_var3D(
    const CCTK_REAL &xlogrho,
    const CCTK_REAL &xye,
          CCTK_REAL xvar3D,
    const key       &which_var3D);



// Helper routines in IO.cc
void read_nrho_ntemp_nye_from_EOStable(H5File &file);
void read_arrays_from_EOStable(H5File &file);



/* Routines to get thermodynamic quantities for polytropic EOS. Defined in
   PolyEOS_routines.cc .                                                        */
void press_eps_from_rho_temp_ye_polyEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xtemp,
    const CCTK_REAL &xye,
          CCTK_REAL &out_press,
          CCTK_REAL &out_eps);

void press_temp_from_rho_ye_eps_polyEOS(
    const CCTK_REAL &xrho,
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_press,
          CCTK_REAL &out_temp);

void dpdrhoe_temp_from_rho_ye_eps_polyEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_dpdrhoe,
          CCTK_REAL &out_temp);

void dpderho_temp_from_rho_ye_eps_polyEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_dpderho,
          CCTK_REAL &out_temp);

void dpdrhoe_dpderho_temp_from_rho_ye_eps_polyEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_dpdrhoe,
          CCTK_REAL &out_dpderho,
          CCTK_REAL &out_temp);



/* Routines to get thermodynamic quantities for finite-temperature,
   microphysical, tabulated EOS. Defined in NucEOS_routines.cc .                */
void press_eps_from_rho_temp_ye_nucEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xtemp,
    const CCTK_REAL &xye,
          CCTK_REAL &out_press,
          CCTK_REAL &out_eps);

void press_temp_from_rho_ye_eps_nucEOS(
    const CCTK_REAL &xrho,
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_press,
          CCTK_REAL &out_temp);

void dpdrhoe_temp_from_rho_ye_eps_nucEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_dpdrhoe,
          CCTK_REAL &out_temp);

void dpderho_temp_from_rho_ye_eps_nucEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_dpderho,
          CCTK_REAL &out_temp);

void dpdrhoe_dpderho_temp_from_rho_ye_eps_nucEOS(
    const CCTK_REAL &xrho, 
    const CCTK_REAL &xye,
          CCTK_REAL &xeps,
          CCTK_REAL &out_dpdrhoe,
          CCTK_REAL &out_dpderho,
          CCTK_REAL &out_temp);

// #############################################################################

#endif // RIT_EOS_HH
