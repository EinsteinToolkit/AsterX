# Schedule definitions for thorn ADMBase

SCHEDULE GROUP ADMBase_InitialData AT initial
{
} "Schedule group for calculating ADM initial data"

SCHEDULE GROUP ADMBase_InitialGauge AT initial AFTER ADMBase_InitialData
{
} "Schedule group for the ADM initial gauge condition"

SCHEDULE GROUP ADMBase_PostInitial AT initial AFTER (ADMBase_InitialData ADMBase_InitialGauge)
{
} "Schedule group for modifying the ADM initial data, such as e.g. adding noise"

SCHEDULE GROUP ADMBase_InitialData AT postregrid
{
} "Schedule group for calculating ADM initial data"

SCHEDULE GROUP ADMBase_InitialGauge AT postregrid AFTER ADMBase_InitialData
{
} "Schedule group for the ADM initial gauge condition"

SCHEDULE GROUP ADMBase_PostInitial AT postregrid AFTER (ADMBase_InitialData ADMBase_InitialGauge)
{
} "Schedule group for modifying the ADM initial data, such as e.g. adding noise"

SCHEDULE GROUP ADMBase_SetADMVars AT postregrid
{
} "Set ADM variables in this group, or before this group"

SCHEDULE GROUP ADMBase_SetADMVars AT poststep
{
} "Set ADM variables in this group, or before this group"

SCHEDULE GROUP ADMBase_SetADMVars IN ODESolvers_PostStep
{
} "Set ADM variables in this group, or before this group"

SCHEDULE GROUP ADMBase_SetADMRHS AT postregrid
{
} "Set ADM RHS variables in this group, or before this group"  

SCHEDULE GROUP ADMBase_SetADMRHS AT poststep
{
} "Set ADM RHS variables in this group, or before this group"  

SCHEDULE GROUP ADMBase_SetADMRHS IN ODESolvers_PostStep
{
} "Set ADM RHS variables in this group, or before this group"  



if (CCTK_EQUALS(initial_data, "Cartesian Minkowski")) {
  SCHEDULE ADMBase_initial_data IN ADMBase_InitialData
  {
    LANG: C
    WRITES: metric(interior) curv(interior)
  } "Set up Cartesian Minkowski initial data"
} else if (CCTK_EQUALS(initial_data, "linear wave")) {
  SCHEDULE ADMBase_linear_wave IN ADMBase_InitialData
  {
    LANG: C
    WRITES: metric(interior) curv(interior)
  } "Set up linear wave initial data"
}

if (CCTK_EQUALS(initial_lapse, "one")) {
  SCHEDULE ADMBase_initial_lapse IN ADMBase_InitialGauge
  {
    LANG: C
    WRITES: lapse(interior)
  } "Set lapse to one"
}

if (CCTK_EQUALS(initial_dtlapse, "zero")) {
  SCHEDULE ADMBase_initial_dtlapse IN ADMBase_InitialGauge
  {
    LANG: C
    WRITES: dtlapse(interior)
  } "Set dtlapse to zero"
}

if (CCTK_EQUALS(initial_shift, "zero")) {
  SCHEDULE ADMBase_initial_shift IN ADMBase_InitialGauge
  {
    LANG: C
    WRITES: shift(interior)
  } "Set shift to zero"
}

if (CCTK_EQUALS(initial_dtshift, "zero")) {
  SCHEDULE ADMBase_initial_dtshift IN ADMBase_InitialGauge
  {
    LANG: C
    WRITES: dtshift(interior)
  } "Set dtshift to zero"
}



if (noise_amplitude != 0) {
  SCHEDULE ADMBase_add_noise IN ADMBase_PostInitial
  {
    LANG: C
    READS: metric(interior)
    READS: curv(interior)
    READS: lapse(interior)
    READS: dtlapse(interior)
    READS: shift(interior)
    READS: dtshift(interior)
    WRITES: metric(interior)
    WRITES: curv(interior)
    WRITES: lapse(interior)
    WRITES: dtlapse(interior)
    WRITES: shift(interior)
    WRITES: dtshift(interior)
  } "Add noise to ADMBase variables"
}
