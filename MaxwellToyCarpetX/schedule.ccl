# Schedule definitions for thorn MaxwellToyCarpetX

SCHEDULE MaxwellToyCarpetX_Initialize AT initial
{
  LANG: C

  WRITES: potential_phi(interior)
  WRITES: potential_ax(interior) potential_ay(interior) potential_az(interior)
  WRITES: current_rho(interior)
  WRITES: current_jx(interior) current_jy(interior) current_jz(interior)

  SYNC: potential_phi
  SYNC: potential_ax potential_ay potential_az
  SYNC: current_rho
  SYNC: current_jx current_jy current_jz
} "Set up initial conditions for the Maxwell equations"

SCHEDULE MaxwellToyCarpetX_InitializeFields AT initial AFTER MaxwellToyCarpetX_Initialize
{
  LANG: C

  READS: potential_phi(everywhere)
  READS: potential_ax(everywhere) potential_ay(everywhere) potential_az(everywhere)
  READS: current_rho(everywhere)
  READS: current_jx(everywhere) current_jy(everywhere) current_jz(everywhere)
  WRITES: field_ex(interior) field_ey(interior) field_ez(interior)
  WRITES: field_bx(interior) field_by(interior) field_bz(interior)

  SYNC: field_ex field_ey field_ez
  SYNC: field_bx field_by field_bz
} "Calculate Maxwell fields from initial conditions"

SCHEDULE MaxwellToyCarpetX_EstimateError AT postinitial
{
  LANG: C

  READS: potential_phi(everywhere)
  READS: potential_ax(everywhere) potential_ay(everywhere) potential_az(everywhere)
  READS: field_ex(everywhere) field_ey(everywhere) field_ez(everywhere)
  READS: field_bx(everywhere) field_by(everywhere) field_bz(everywhere)

  WRITES: CarpetX::regrid_error(interior)
} "Estimate local error for regridding initial conditions"



SCHEDULE MaxwellToyCarpetX_EstimateError AT poststep
{
  LANG: C

  READS: potential_phi(everywhere)
  READS: potential_ax(everywhere) potential_ay(everywhere) potential_az(everywhere)
  READS: field_ex(everywhere) field_ey(everywhere) field_ez(everywhere)
  READS: field_bx(everywhere) field_by(everywhere) field_bz(everywhere)

  WRITES: CarpetX::regrid_error(interior)
} "Estimate local error for regridding during evolution"



SCHEDULE MaxwellToyCarpetX_Boundaries AT postregrid
{
  LANG: C

  SYNC: potential_phi
  SYNC: potential_ax potential_ay potential_az
  SYNC: field_ex field_ey field_ez
  SYNC: field_bx field_by field_bz
  SYNC: current_rho
  SYNC: current_jx current_jy current_jz
} "Apply boundary conditions for the Maxwell equations"



if (evolve_b) {

  SCHEDULE MaxwellToyCarpetX_Evolve1 AT evol
  {
    LANG: C

    READS: potential_phi_p(everywhere)
    READS: potential_ax_p(everywhere) potential_ay_p(everywhere) potential_az_p(everywhere)
    READS: field_ex_p(everywhere) field_ey_p(everywhere) field_ez_p(everywhere)
    READS: field_bx_p(everywhere) field_by_p(everywhere) field_bz_p(everywhere)
    READS: current_rho_p(everywhere)
    READS: current_jx_p(everywhere) current_jy_p(everywhere) current_jz_p(everywhere)

    WRITES: potential_ax(interior) potential_ay(interior) potential_az(interior)
    WRITES: field_bx(interior) field_by(interior) field_bz(interior)
    WRITES: current_jx(interior) current_jy(interior) current_jz(interior)

    SYNC: potential_ax potential_ay potential_az
    SYNC: field_bx field_by field_bz
    SYNC: current_jx current_jy current_jz
  } "Evolve the Maxwell equations, step 1"

} else {

  SCHEDULE MaxwellToyCarpetX_Evolve1 AT evol
  {
    LANG: C

    READS: potential_phi_p(everywhere)
    READS: potential_ax_p(everywhere) potential_ay_p(everywhere) potential_az_p(everywhere)
    READS: field_ex_p(everywhere) field_ey_p(everywhere) field_ez_p(everywhere)
    READS: current_rho_p(everywhere)
    READS: current_jx_p(everywhere) current_jy_p(everywhere) current_jz_p(everywhere)

    WRITES: potential_ax(interior) potential_ay(interior) potential_az(interior)
    WRITES: current_jx(interior) current_jy(interior) current_jz(interior)

    SYNC: potential_ax potential_ay potential_az
    SYNC: current_jx current_jy current_jz
  } "Evolve the Maxwell equations, step 1"

  SCHEDULE MaxwellToyCarpetX_Dependents1 AT evol AFTER MaxwellToyCarpetX_Evolve1
  {
    LANG: C

    READS: potential_ax(interior) potential_ay(interior) potential_az(interior)
    WRITES: field_bx(interior) field_by(interior) field_bz(interior)

    SYNC: field_bx field_by field_bz
  } "Calculate the magnetic field"
}

SCHEDULE MaxwellToyCarpetX_Evolve2 AT evol AFTER (MaxwellToyCarpetX_Evolve1, MaxwellToyCarpetX_Dependents1)
{
  LANG: C

  READS: potential_phi_p(everywhere)
  READS: field_ex_p(everywhere) field_ey_p(everywhere) field_ez_p(everywhere)
  READS: current_rho_p(everywhere)

  READS: potential_ax(everywhere) potential_ay(everywhere) potential_az(everywhere)
  READS: field_bx(everywhere) field_by(everywhere) field_bz(everywhere)
  READS: current_jx(everywhere) current_jy(everywhere) current_jz(everywhere)

  WRITES: potential_phi(interior)
  WRITES: field_ex(interior) field_ey(interior) field_ez(interior)
  WRITES: current_rho(interior)

  SYNC: potential_phi
  SYNC: field_ex field_ey field_ez
  SYNC: current_rho
} "Evolve the Maxwell equations step 2"



SCHEDULE MaxwellToyCarpetX_Boundaries AT postrestrict
{
  LANG: C

  SYNC: potential_phi
  SYNC: potential_ax potential_ay potential_az
  SYNC: field_ex field_ey field_ez
  SYNC: field_bx field_by field_bz
  SYNC: current_rho
  SYNC: current_jx current_jy current_jz
} "Apply boundary conditions for the Maxwell equations"



SCHEDULE MaxwellToyCarpetX_Constraints AT analysis
{
  LANG: C

  READS: field_ex(everywhere) field_ey(everywhere) field_ez(everywhere)
  READS: field_bx(everywhere) field_by(everywhere) field_bz(everywhere)
  READS: current_rho(interior)

  WRITES: constraints_dive(interior)
  WRITES: constraints_divb(interior)

  SYNC: constraints_dive
  SYNC: constraints_divb

  # TRIGGERS: constraints_dive
  # TRIGGERS: constraints_divb
} "Calculate constraints of the Maxwell equations"

# SCHEDULE MaxwellToyCarpetX_Energy AT analysis
# {
#   LANG: C
# } "Calculate energy density for the Maxwell equations"

SCHEDULE MaxwellToyCarpetX_Error AT analysis
{
  LANG: C

  READS: potential_phi(everywhere)
  READS: potential_ax(everywhere) potential_ay(everywhere) potential_az(everywhere)
  READS: field_ex(everywhere) field_ey(everywhere) field_ez(everywhere)
  READS: field_bx(everywhere) field_by(everywhere) field_bz(everywhere)
  READS: current_rho(everywhere)
  READS: current_jx(everywhere) current_jy(everywhere) current_jz(everywhere)

  WRITES: errors_potential_phi(everywhere)
  WRITES: errors_potential_ax(everywhere) errors_potential_ay(everywhere) errors_potential_az(everywhere)
  WRITES: errors_field_ex(everywhere) errors_field_ey(everywhere) errors_field_ez(everywhere)
  WRITES: errors_field_bx(everywhere) errors_field_by(everywhere) errors_field_bz(everywhere)
  WRITES: errors_current_rho(everywhere)
  WRITES: errors_current_jx(everywhere) errors_current_jy(everywhere) errors_current_jz(everywhere)

  # TRIGGERS: errors_potential_phi
  # TRIGGERS: errors_potential_ax errors_potential_ay errors_potential_az
  # TRIGGERS: errors_field_ex errors_field_ey errors_field_ez
  # TRIGGERS: errors_field_bx errors_field_by errors_field_bz
  # TRIGGERS: errors_current_rho
  # TRIGGERS: errors_current_jx errors_current_jy errors_current_jz
} "Calculate error for the Maxwell equations"

# SCHEDULE MaxwellToyCarpetX_NaNCheck AT analysis AS zzz_MaxwellToyCarpetX_NaNCheck
# {
#   LANG: C
# 
#   READS: potential_phi(everywhere)
#   READS: potential_ax(everywhere) potential_ay(everywhere) potential_az(everywhere)
#   READS: field_ex(everywhere) field_ey(everywhere) field_ez(everywhere)
#   READS: field_bx(everywhere) field_by(everywhere) field_bz(everywhere)
#   READS: current_rho(everywhere)
#   READS: current_jx(everywhere) current_jy(everywhere) current_jz(everywhere)
#   READS: dive(everywhere)
#   READS: divb(everywhere)
# } "Check for NaNs"
