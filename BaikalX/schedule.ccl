
# First allocate storage for all ADMBase gridfunctions, which are needed by NRPy+
STORAGE: ADMBase::metric, ADMBase::curv, ADMBase::lapse, ADMBase::shift

# Next allocate storage for all 3 gridfunction groups used in BaikalX
STORAGE: evol_variables        # Evolution variables
STORAGE: evol_variables_rhs    # Variables storing right-hand-sides
STORAGE: aux_variables         # Diagnostics variables
STORAGE: auxevol_variables     # Single-timelevel storage of variables needed for evolutions.

# The following scheduler is based on Lean/LeanBSSNMoL/schedule.ccl

schedule BaikalX_Banner at STARTUP
{
  LANG: C
  OPTIONS: meta
} "Output ASCII art banner"

schedule BaikalX_ADM_to_BSSN_all_but_lambdaU at CCTK_INITIAL after ADMBase_PostInitial
{
  LANG: C
  WRITES: aDD00GF(everywhere) aDD01GF(everywhere) aDD02GF(everywhere) aDD11GF(everywhere) aDD12GF(everywhere) aDD22GF(everywhere) 
  WRITES: alphaGF(everywhere) betU0GF(everywhere) betU1GF(everywhere) betU2GF(everywhere) cfGF(everywhere)
  WRITES: hDD00GF(everywhere) hDD01GF(everywhere) hDD02GF(everywhere) hDD11GF(everywhere) hDD12GF(everywhere) hDD22GF(everywhere)
  WRITES: trKGF(everywhere) vetU0GF(everywhere) vetU1GF(everywhere) vetU2GF(everywhere)

  READS: ADMBase::metric(everywhere)
  READS: ADMBase::curv(everywhere)
  READS: ADMBase::shift(everywhere)
  READS: ADMBase::lapse(everywhere)
  READS: ADMBase::dtshift(everywhere)
} "Convert initial data into BSSN variables"

schedule BaikalX_ADM_to_BSSN_lambdaU at CCTK_INITIAL after ADMBase_PostInitial after BaikalX_ADM_to_BSSN_all_but_lambdaU
{
  LANG: C
  SYNC: BaikalX::evol_variables
  # I don't really write to the outer boundary but for periodic boundaries the 
  # SYNC above took care of them (and CarpetX does not yet realize this)
  WRITES: lambdaU0GF(interiorwithboundary) lambdaU1GF(interiorwithboundary) lambdaU2GF(interiorwithboundary)
  READS: hDD00GF(everywhere) hDD01GF(everywhere) hDD02GF(everywhere) hDD11GF(everywhere) hDD12GF(everywhere) hDD22GF(everywhere)
} "Convert initial data into BSSN variables"

# MoL: compute RHSs, etc
schedule BaikalX_BSSN_to_ADM in ODESolvers_RHS after BaikalX_zero_rhss after BaikalX_T4UU before BaikalX_Ricci
{
  LANG: C
  READS: BaikalX::evol_variables(everywhere)
  WRITES: ADMBase::metric(everywhere)
  WRITES: ADMBase::curv(everywhere)
  WRITES: ADMBase::shift(everywhere)
  WRITES: ADMBase::dtshift(everywhere)
  WRITES: ADMBase::lapse(everywhere)
} "Perform BSSN-to-ADM conversion. Needed for HydroBase coupling."

schedule BaikalX_zero_rhss at PostRestrict as BaikalX_ZeroRHS
{
  LANG: C
  WRITES: BaikalX::evol_variables_rhs(everywhere)
  # this applies boundary conditions and since ODESolvers_RHS is called after ODESolver's
  # ADD, this is the equivalent of MoL_PostStep
  # I do not really write to the boundary, but for periodic ones used, the SYNC does
  WRITES: BaikalX::evol_variables(boundary)
  SYNC: BaikalX::evol_variables
} "Zero out Baikal RHS"

schedule BaikalX_BSSN_to_ADM at PostRestrict after BaikalX_zero_rhss before BaikalX_Ricci
{
  LANG: C
  READS: BaikalX::evol_variables(everywhere)
  WRITES: ADMBase::metric(everywhere)
  WRITES: ADMBase::curv(everywhere)
  WRITES: ADMBase::shift(everywhere)
  WRITES: ADMBase::dtshift(everywhere)
  WRITES: ADMBase::lapse(everywhere)
} "Perform BSSN-to-ADM conversion. Needed for HydroBase coupling."

schedule BaikalX_zero_rhss at PostRegrid as BaikalX_ZeroRHS
{
  LANG: C
  WRITES: BaikalX::evol_variables_rhs(everywhere)
  # this applies boundary conditions and since ODESolvers_RHS is called after ODESolver's
  # ADD, this is the equivalent of MoL_PostStep
  # I do not really write to the boundary, but for periodic ones used, the SYNC does
  WRITES: BaikalX::evol_variables(boundary)
  SYNC: BaikalX::evol_variables
} "Zero out Baikal RHS"

schedule BaikalX_BSSN_to_ADM at PostRegrid after BaikalX_zero_rhss before BaikalX_Ricci
{
  LANG: C
  READS: BaikalX::evol_variables(everywhere)
  WRITES: ADMBase::metric(everywhere)
  WRITES: ADMBase::curv(everywhere)
  WRITES: ADMBase::shift(everywhere)
  WRITES: ADMBase::dtshift(everywhere)
  WRITES: ADMBase::lapse(everywhere)
} "Perform BSSN-to-ADM conversion. Needed for HydroBase coupling."

schedule BaikalX_zero_rhss in ODESolvers_RHS as BaikalX_ZeroRHS before BaikalX_Ricci
{
  LANG: C
  WRITES: BaikalX::evol_variables_rhs(everywhere)
  # this applies boundary conditions and since ODESolvers_RHS is called after ODESolver's
  # ADD, this is the equivalent of MoL_PostStep
  # I do not really write to the boundary, but for periodic ones used, the SYNC does
  WRITES: BaikalX::evol_variables(boundary)
  SYNC: BaikalX::evol_variables
} "Zero out Baikal RHS"

schedule driver_pt1_BSSN_Ricci in ODESolvers_RHS as BaikalX_Ricci before BaikalX_RHS
{
  LANG: C
  READS: BaikalX::evol_variables(everywhere)
  WRITES: BaikalX::auxevol_variables(interior)
} "MoL: Compute Ricci tensor"

schedule driver_pt2_BSSN_RHSs in ODESolvers_RHS as BaikalX_RHS after BaikalX_Ricci
{
  LANG: C
  READS: BaikalX::auxevol_variables(interior)
  READS: BaikalX::evol_variables(everywhere)
  WRITES: BaikalX::evol_variables_rhs(interior)
} "MoL: Evaluate BSSN RHSs"

schedule enforce_detgammabar_constraint in ODESolvers_RHS before BaikalX_zero_rhss
{
  LANG: C
  READS: hDD00GF(interior) hDD01GF(interior) hDD02GF(interior) hDD11GF(interior) hDD12GF(interior) hDD22GF(interior)
  WRITES: hDD00GF(interior) hDD01GF(interior) hDD02GF(interior) hDD11GF(interior) hDD12GF(interior) hDD22GF(interior)
} "Enforce detgammabar = detgammahat (= 1 in Cartesian)"

# Compute Hamiltonian & momentum constraints
schedule group MoL_PseudoEvolution in POSTSTEP
{
} "Compute constraints etc."


schedule BaikalX_BSSN_constraints in MoL_PseudoEvolution
{
  LANG: C
  READS: BaikalX::evol_variables(everywhere)
  WRITES: BaikalX::aux_variables(interior)
} "Compute BSSN (Hamiltonian and momentum) constraints"

